#### Part One

The unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers
called levels that are separated by spaces. For example:

7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
This example data contains six reports each containing five levels.

The engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate
levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the
following are true:

The levels are either all increasing or all decreasing.
Any two adjacent levels differ by at least one and at most three.
In the example above, the reports can be found safe or unsafe by checking those rules:

7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.
1 2 7 8 9: Unsafe because 2 7 is an increase of 5.
9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.
1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.
8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.
1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.
So, in this example, 2 reports are safe.

Analyze the unusual data from the engineers. How many reports are safe?

- Level Array inside Report Array
- 1. All levels in a report must be either increasing or decreasing:
    Map over levels pairwise and check if all are increasing or decreasing OR
    method for sorting and comparing with og list.
- 2. Adjacent levels must differ by at least 1 and at most 3:
    if increasing, map over levels pairwise and check if all are increasing by 1, 2, or 3
    if decreasing, map over levels pairwise and check if all are decreasing by 1, 2, or 3
    OR distance between pairs is 1, 2, or 3
- Count reports that are safe

#### Part Two

Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.

More of the above example's reports are now safe:

7 6 4 2 1: Safe without removing any level.
1 2 7 8 9: Unsafe regardless of which level is removed.
9 7 6 2 1: Unsafe regardless of which level is removed.
1 3 2 4 5: Safe by removing the second level, 3.
8 6 4 4 1: Safe by removing the third level, 4.
1 3 6 7 9: Safe without removing any level.
Thanks to the Problem Dampener, 4 reports are actually safe!

Update your analysis by handling situations where the Problem Dampener can remove a single level from unsafe reports. How many reports are now safe?

- Dict of problem level pairs
- if dict contains more than one key, return Unsafe
- if dict contains one key, check if value is 1, 2, or 3

Example dataset doesn't cover all cases.
-In actual data we may have duplicates not next to each other, so need to account for this case.
- Check increase/decrease. If true check if difference is > 3.
- Need to check if pair levels are safe; now fine if difference 0 (so we don't have to worry about dupes), but not if 
bigger than 3 (removing more than one won't change safety).

, Count unsafe level pairs, if more than one, return unsafe, if one,